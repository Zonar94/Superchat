[{"C:\\Users\\zonar\\Documents\\Development\\Superchat\\Superchat\\src\\index.js":"1","C:\\Users\\zonar\\Documents\\Development\\Superchat\\Superchat\\src\\App.js":"2","C:\\Users\\zonar\\Documents\\Development\\Superchat\\Superchat\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":3104,"mtime":1609887439151,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1j0pjhe",{"filePath":"11","messages":"12","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"C:\\Users\\zonar\\Documents\\Development\\Superchat\\Superchat\\src\\index.js",[],["17","18"],"C:\\Users\\zonar\\Documents\\Development\\Superchat\\Superchat\\src\\App.js",["19","20","21","22","23"],"import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({                                      \n  apiKey: \"AIzaSyByzYYzzbwYkIC-TrMyoFgEgBGRm4SsqNk\",\n  authDomain: \"superchat-2c981.firebaseapp.com\",\n  projectId: \"superchat-2c981\",\n  storageBucket: \"superchat-2c981.appspot.com\",\n  messagingSenderId: \"257469666684\",\n  appId: \"1:257469666684:web:49c9b526a611387a7140f9\",\n  measurementId: \"G-T19CR0RERM\"\n})\n\nconst auth = firebase.auth();      \nconst firestore = firebase.firestore();\n\nfunction App() {\n\n   const [user] = useAuthState(auth);            // Signed in user is an object. Signed out user is null\n\n  return (\n    <div className=\"App\">\n      <header>\n        \n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}            // if user is signed in it shows the chat room, else it shows the sign in button\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {                                        //Signs the user in with Google\n   const signInWithGoogle = () => {\n     const provider = new firebase.auth.GoogleAuthProvider();    \n     auth.signInWithPopup(provider);                                   // pop up window\n   }\n\n   return(\n     <button onClick={signInWithGoogle}>Sign in with Google</button>    //waits for the button\n   )\n}\n\nfunction SignOut() {                                   // signs the user out\n  return auth.currentUser && (\n    \n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom(){\n\n  const dummy = useRef()\n\n  const messagesRef = firestore.collection('messages');     //reference from fire store collection\n  const query = messagesRef.orderBy('createdAt').limit(25); //query from the documents\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e) => {\n\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n\n    setFormValue('');\n    \n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n  return (\n    <>\n    <main>\n         {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n         <div ref={dummy}></div>\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n\n          <button type=\"submit\">ðŸ›¹</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {                                         \n  const { text, uid, photoURL } = props.message; \n  \n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n   <div className={'message ${messageClass}'}>\n    <img src={photoURL} />\n    <p>{text}</p>\n  </div>\n  )\n}\n\nexport default App;\n",["24","25"],"C:\\Users\\zonar\\Documents\\Development\\Superchat\\Superchat\\src\\reportWebVitals.js",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":35,"column":43,"nodeType":"32","endLine":36,"endColumn":7},{"ruleId":"33","severity":1,"message":"34","line":52,"column":10,"nodeType":"35","messageId":"36","endLine":52,"endColumn":17},{"ruleId":"33","severity":1,"message":"37","line":107,"column":9,"nodeType":"35","messageId":"36","endLine":107,"endColumn":21},{"ruleId":"38","severity":1,"message":"39","line":110,"column":20,"nodeType":"32","messageId":"40","endLine":110,"endColumn":45},{"ruleId":"41","severity":1,"message":"42","line":111,"column":5,"nodeType":"43","endLine":111,"endColumn":27},{"ruleId":"26","replacedBy":"44"},{"ruleId":"28","replacedBy":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-unused-vars","'SignOut' is defined but never used.","Identifier","unusedVar","'messageClass' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","unexpectedTemplateExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["46"],["47"],"no-global-assign","no-unsafe-negation"]